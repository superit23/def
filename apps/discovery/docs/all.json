{"shell":true,"revision":"37bd1b00023d126845ad0da314d174727552b754","objects":[{"type":null,"source":"lib/dns.ex:3","object_type":"ModuleObject","moduledoc":"Uses DNS to find other DEF nodes. Currently implemented by using a `hostname`,\nthe idea is multiples DEF nodes will be pointed at by a single, DNS entry.\n","module":"Elixir.Discovery.Dns","id":"Discovery.Dns"},{"type":null,"source":"lib/exhibitor.ex:3","object_type":"ModuleObject","moduledoc":"Uses an existing instance of Netflix Exhibitor to discover DEF nodes.\nWith a supplied `url` and `base`, adds itself to `/base/key` and calls on the Exhibitor REST API\nfor the key `base` to discover other nodes.\n","module":"Elixir.Discovery.Exhibitor","id":"Discovery.Exhibitor"},{"type":null,"source":"lib/file.ex:3","object_type":"ModuleObject","moduledoc":"Taking in a list of `filepaths`, this discover strategy will assume each line\nis a node.\n","module":"Elixir.Discovery.File","id":"Discovery.File"},{"type":null,"source":"lib/marathon.ex:3","object_type":"ModuleObject","moduledoc":"Uses an existing instance of Mesosphere Marathon to find other DEF nodes.\nGiven the `service`, we simply find the current tasks and extract the hosts.\nDEF nodes are assumed to be in SERVICE@HOST format.\n","module":"Elixir.Discovery.Marathon","id":"Discovery.Marathon"},{"type":null,"source":"lib/mesos.ex:3","object_type":"ModuleObject","moduledoc":"Uses an existing instance of Apache Mesos to find other DEF nodes.\nUsing the given framework name, DEF assumes the containers under the currently\nrunning tasks are DEF nodes and formatted as FRAMEWORK@IP_ADDRESS.\n","module":"Elixir.Discovery.Mesos","id":"Discovery.Mesos"},{"type":null,"source":"lib/multicast.ex:4","object_type":"ModuleObject","moduledoc":"Uses multicast to discover other DEF nodes in the network. To reduce storming,\nthe nodes reply to its unicast address.\n","module":"Elixir.Discovery.Multicast","id":"Discovery.Multicast"},{"type":null,"source":"lib/nop.ex:3","object_type":"ModuleObject","moduledoc":"Simply takes the list of nodes from the user to give to DEF.\n","module":"Elixir.Discovery.Nop","id":"Discovery.Nop"},{"type":null,"source":"lib/discovery.ex:3","object_type":"ModuleObject","moduledoc":"A discovery strategy is a mechanism for nodes to find other nodes without\nexplicit user input. Multiple discovery strategies can be used and aggregated\nto allow for fault-tolerance or connection across partitions.\n","module":"Elixir.Discovery.Strategy","id":"Discovery.Strategy"},{"type":"def","source":"lib/dns.ex:17","signature":[["map",[],"Elixir"]],"object_type":"FunctionObject","name":"discover","module_id":"Discovery.Dns","id":"discover/1","doc":"Resolves `hostname` to multiple A records, then prepends with `service`.\n","arity":1},{"type":"def","source":"lib/dns.ex:10","signature":[["\\\\",[],[["args",[],"Elixir"],""]]],"object_type":"FunctionObject","name":"start_link","module_id":"Discovery.Dns","id":"start_link/1","doc":"Initializes the discovery mechanism. Takes no arguments; NOP.\n","arity":1},{"type":"def","source":"lib/exhibitor.ex:22","signature":[["map",[],"Elixir"]],"object_type":"FunctionObject","name":"discover","module_id":"Discovery.Exhibitor","id":"discover/1","doc":"Discovers other DEF nodes by querying the `base` key.\n","arity":1},{"type":"def","source":"lib/exhibitor.ex:13","signature":[["map",[],"Elixir"]],"object_type":"FunctionObject","name":"start_link","module_id":"Discovery.Exhibitor","id":"start_link/1","doc":"Initializes the discovery mechanism with the Exhibitor REST API URL as well as\nthe `base` key to add itself to.\n","arity":1},{"type":"def","source":"lib/file.ex:21","signature":[["\\\\",[],["map",["%{}",[["line",25]],[["filepaths",[]]]]]]],"object_type":"FunctionObject","name":"discover","module_id":"Discovery.File","id":"discover/1","doc":"Reads the files from the given `filepaths` along with '/tmp/nodes'. Arguments\noptional.\n","arity":1},{"type":"def","source":"lib/file.ex:10","signature":[["\\\\",[],[["args",[],"Elixir"],""]]],"object_type":"FunctionObject","name":"start_link","module_id":"Discovery.File","id":"start_link/1","doc":"Initializes the discovery mechanism by writing to '/tmp/nodes'. Does not\ntake any arguments.\n","arity":1},{"type":"def","source":"lib/marathon.ex:18","signature":[["map",[],"Elixir"]],"object_type":"FunctionObject","name":"discover","module_id":"Discovery.Marathon","id":"discover/1","doc":"Returns hosts running tasks for the given `service`.\n","arity":1},{"type":"def","source":"lib/marathon.ex:11","signature":[["\\\\",[],[["url",[],null],"http://marathon.mesos:8080/v2"]]],"object_type":"FunctionObject","name":"start_link","module_id":"Discovery.Marathon","id":"start_link/1","doc":"Initializes the discovery mechanism with the Marathon API `url`.\n","arity":1},{"type":"def","source":"lib/mesos.ex:19","signature":[["map",[],"Elixir"]],"object_type":"FunctionObject","name":"discover","module_id":"Discovery.Mesos","id":"discover/1","doc":"Discovers the nodes by container IP addresses given the `framework`.\n","arity":1},{"type":"def","source":"lib/mesos.ex:11","signature":[["\\\\",[],[["url",[],null],"http://leader.mesos:5050/v1/api"]]],"object_type":"FunctionObject","name":"start_link","module_id":"Discovery.Mesos","id":"start_link/1","doc":"Initializes the Mesos integration with the API `url`.\n","arity":1},{"type":"def","source":"lib/multicast.ex:2","signature":[["old",[],"Elixir"],["state",[],null],["extra",[],"Elixir"]],"object_type":"FunctionObject","name":"code_change","module_id":"Discovery.Multicast","id":"code_change/3","doc":false,"arity":3},{"type":"def","source":"lib/multicast.ex:37","signature":[["\\\\",[],[["args",[],"Elixir"],["%{}",[["line",40]],[]]]]],"object_type":"FunctionObject","name":"discover","module_id":"Discovery.Multicast","id":"discover/1","doc":"Runs the discovery mechanism. Does not take any arguments.\n","arity":1},{"type":"def","source":"lib/multicast.ex:2","signature":[["msg",[],null],["from",[],"Elixir"],["state",[],null]],"object_type":"FunctionObject","name":"handle_call","module_id":"Discovery.Multicast","id":"handle_call/3","doc":false,"arity":3},{"type":"def","source":"lib/multicast.ex:2","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_cast","module_id":"Discovery.Multicast","id":"handle_cast/2","doc":false,"arity":2},{"type":"def","source":"lib/multicast.ex:2","signature":[["arg1",[],"Elixir"],["state",[],null]],"object_type":"FunctionObject","name":"handle_info","module_id":"Discovery.Multicast","id":"handle_info/2","doc":false,"arity":2},{"type":"def","source":"lib/multicast.ex:2","signature":[["args",[],null]],"object_type":"FunctionObject","name":"init","module_id":"Discovery.Multicast","id":"init/1","doc":false,"arity":1},{"type":"def","source":"lib/multicast.ex:15","signature":[["\\\\",[],[["args",[],"Elixir"],""]]],"object_type":"FunctionObject","name":"start_link","module_id":"Discovery.Multicast","id":"start_link/1","doc":"Initializes the discovery mechanism. Does not take any arguments.\n","arity":1},{"type":"def","source":"lib/multicast.ex:2","signature":[["reason",[],"Elixir"],["state",[],"Elixir"]],"object_type":"FunctionObject","name":"terminate","module_id":"Discovery.Multicast","id":"terminate/2","doc":false,"arity":2},{"type":"def","source":"lib/nop.ex:16","signature":[["map",[],"Elixir"]],"object_type":"FunctionObject","name":"discover","module_id":"Discovery.Nop","id":"discover/1","doc":"Takes a list of `nodes` to return to DEF.\n","arity":1},{"type":"def","source":"lib/nop.ex:9","signature":[["\\\\",[],[["args",[],"Elixir"],""]]],"object_type":"FunctionObject","name":"start_link","module_id":"Discovery.Nop","id":"start_link/1","doc":"Initializes the module. Takes no arguments; NOP.\n","arity":1}],"language":"elixir","git_repo_url":"https://github.com/superit23/def.git","client_version":"0.5.6","client_name":"inch_ex","branch_name":"master","args":[]}