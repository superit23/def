{"shell":true,"revision":"37bd1b00023d126845ad0da314d174727552b754","objects":[{"type":null,"source":"lib/algorithms.ex:1","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Algorithms","id":"Algorithms"},{"type":null,"source":"lib/analysis.ex:1","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Algorithms.CHAnalysis","id":"Algorithms.CHAnalysis"},{"type":null,"source":"lib/consistent_hashing.ex:2","object_type":"ModuleObject","moduledoc":"Implements the consistent hashing algorithm using an arbitrary hashing function.\nConsistent hashing is used to deterministically map keys to partitions without\nglobal knowledge.\n\n## Examples\n\n  iex> h_func = fn val -> :erlang.phash2(val) end\n  <...\n\n  iex> keys = Enum.map(1..10, &(\"key\" <> to_string(&1)))\n  [\"key1\", \"key2\",...\n\n  iex> buckets = Enum.map(1..6, &(\"bucket\" <> to_string(&1)))\n  [\"bucket1\", \"bucket2\",...\n\n  iex> {h_buckets, hash_map} = Algorithms.ConsistentHashing.prepare_buckets(buckets, h_func)\n  {{:array, 6, 10,...\n\n  iex> Algorithms.ConsistentHashing.find_many(keys, h_buckets, hash_map, h_func)\n  [{\"key1\", \"bucket5\"}, {\"key2\", \"bucket5\"},\n  {\"key3\", \"bucket3\"}, {\"key8\", \"bucket2\"},\n  {\"key4\", \"bucket2\"}, {\"key5\", \"bucket2\"},\n  {\"key6\", \"bucket5\"}, {\"key7\", \"bucket2\"},\n  {\"key9\", \"bucket2\"}, {\"key10\", \"bucket2\"}]\n\n","module":"Elixir.Algorithms.ConsistentHashing","id":"Algorithms.ConsistentHashing"},{"type":null,"source":"lib/raft.ex:1","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Algorithms.Raft","id":"Algorithms.Raft"},{"type":null,"source":"lib/state.ex:1","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.State","id":"State"},{"type":"def","source":"lib/analysis.ex:4","signature":[["n_keys",[],null],["n_buckets",[],null]],"object_type":"FunctionObject","name":"analyze","module_id":"Algorithms.CHAnalysis","id":"analyze/2","doc":null,"arity":2},{"type":"def","source":"lib/analysis.ex:28","signature":[["n_keys",[],null]],"object_type":"FunctionObject","name":"ets_perf","module_id":"Algorithms.CHAnalysis","id":"ets_perf/1","doc":null,"arity":1},{"type":"def","source":"lib/analysis.ex:40","signature":[["n_buckets",[],null]],"object_type":"FunctionObject","name":"map_perf","module_id":"Algorithms.CHAnalysis","id":"map_perf/1","doc":null,"arity":1},{"type":"def","source":"lib/analysis.ex:18","signature":[["n_keys",[],null]],"object_type":"FunctionObject","name":"sort","module_id":"Algorithms.CHAnalysis","id":"sort/1","doc":null,"arity":1},{"type":"def","source":"lib/consistent_hashing.ex:30","signature":[["key",[],null],["buckets",[],null],["hash_map",[],null],["h_func",[],null]],"object_type":"FunctionObject","name":"find","module_id":"Algorithms.ConsistentHashing","id":"find/4","doc":"Takes in buckets AS AN ERLANG ARRAY, key, hash-map between bucket hashes and buckets,\nand hash function.\nReturns a key-bucket tuple.\n","arity":4},{"type":"def","source":"lib/consistent_hashing.ex:39","signature":[["keys",[],null],["h_buckets",[],null],["hash_map",[],null],["h_func",[],null]],"object_type":"FunctionObject","name":"find_many","module_id":"Algorithms.ConsistentHashing","id":"find_many/4","doc":"Takes in buckets AS AN ERLANG ARRAY, keys, hash-map between bucket hashes and buckets,\nand hash function.\nReturns a list of key-bucket tuples.\n","arity":4},{"type":"def","source":"lib/consistent_hashing.ex:57","signature":[["buckets",[],null],["h_func",[],null]],"object_type":"FunctionObject","name":"prepare_buckets","module_id":"Algorithms.ConsistentHashing","id":"prepare_buckets/2","doc":"Using the supplied buckets and hash function, creates a hash map,\nsorts the buckets, and returns them as an Erlang array.\n","arity":2},{"type":"def","source":"lib/consistent_hashing.ex:100","signature":[["n_keys",[],null],["n_buckets",[],null]],"object_type":"FunctionObject","name":"test","module_id":"Algorithms.ConsistentHashing","id":"test/2","doc":"Simple testing functionality. Uses :erlang.phash2/2.\nTakes in number of keys and number of buckets.\n","arity":2},{"type":"def","source":"lib/raft.ex:31","signature":[],"object_type":"FunctionObject","name":"callback_mode","module_id":"Algorithms.Raft","id":"callback_mode/0","doc":null,"arity":0},{"type":"def","source":"lib/raft.ex:48","signature":[["vsn",[],"Elixir"],["state",[],null],["data",[],null],["extra",[],"Elixir"]],"object_type":"FunctionObject","name":"code_change","module_id":"Algorithms.Raft","id":"code_change/4","doc":null,"arity":4},{"type":"def","source":"lib/raft.ex:15","signature":[["pid",[],null]],"object_type":"FunctionObject","name":"get_status","module_id":"Algorithms.Raft","id":"get_status/1","doc":null,"arity":1},{"type":"def","source":"lib/raft.ex:54","signature":[["arg1",[],"Elixir"],["arg2",[],"Elixir"],["state",[],null],["data",[],null]],"object_type":"FunctionObject","name":"handle_event","module_id":"Algorithms.Raft","id":"handle_event/4","doc":null,"arity":4},{"type":"def","source":"lib/raft.ex:36","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"init","module_id":"Algorithms.Raft","id":"init/1","doc":null,"arity":1},{"type":"def","source":"lib/raft.ex:10","signature":[["commit_storage",[],null],["cache_storage",[],null]],"object_type":"FunctionObject","name":"start_link","module_id":"Algorithms.Raft","id":"start_link/2","doc":null,"arity":2},{"type":"def","source":"lib/raft.ex:43","signature":[["reason",[],"Elixir"],["state",[],"Elixir"],["data",[],"Elixir"]],"object_type":"FunctionObject","name":"terminate","module_id":"Algorithms.Raft","id":"terminate/3","doc":null,"arity":3},{"type":"def","source":"lib/raft.ex:21","signature":[["pid",[],null],["list",[],null]],"object_type":"FunctionObject","name":"write","module_id":"Algorithms.Raft","id":"write/2","doc":null,"arity":2}],"language":"elixir","git_repo_url":"https://github.com/superit23/def.git","client_version":"0.5.6","client_name":"inch_ex","branch_name":"master","args":[]}